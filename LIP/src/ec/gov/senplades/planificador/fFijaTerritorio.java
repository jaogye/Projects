package ec.gov.senplades.planificador;

import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Enumeration;

import javax.swing.Icon;
import javax.swing.JCheckBox;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JTree;
import javax.swing.UIManager;
import javax.swing.plaf.ColorUIResource;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreeCellRenderer;
import javax.swing.tree.TreePath;
import javax.swing.tree.TreeSelectionModel;


/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */

/*
 * fFijaTerritorio.java
 *
 * Created on 11/06/2010, 02:47:28 PM
 */

/**
 *
 * @author jalvarado
 */
public class fFijaTerritorio extends javax.swing.JFrame {

    /** Creates new form fFijaTerritorio */
    public fFijaTerritorio() {
        initComponents();
        setVisible(true); 
        setTitle("Fijar Territorio"); 
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTreeTerritorio = new javax.swing.JTree();
	    CheckNode[] nodes = CargaNodos(); 


        jTreeTerritorio = new javax.swing.JTree(nodes[0]);	    


        jTreeTerritorio.setCellRenderer(new CheckRenderer());
        jTreeTerritorio.getSelectionModel().setSelectionMode(
	      TreeSelectionModel.SINGLE_TREE_SELECTION
	    );
        jTreeTerritorio.putClientProperty("JTree.lineStyle", "Angled");
        jTreeTerritorio.addMouseListener(new NodeSelectionListener(jTreeTerritorio)); 
        
        
        cmdAceptar = new javax.swing.JButton();

        //setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jScrollPane1.setViewportView(jTreeTerritorio);

        cmdAceptar.setText("Aceptar");
        cmdAceptar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmdAceptarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 380, Short.MAX_VALUE)
                        .addContainerGap())
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(cmdAceptar)
                        .addGap(160, 160, 160))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 256, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 16, Short.MAX_VALUE)
                .addComponent(cmdAceptar)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>

    private void cmdAceptarActionPerformed(java.awt.event.ActionEvent evt) {
        // TODO add your handling code here:
    	setVisible(false); 
    }

    
    private CheckNode[] CargaNodos() {
	     
	    String[] strs = {"Ecuador",     // 0
		         "Azuay",     // 1
		         "Bolivar",     // 2
		         "Cañar",     // 3		         
		         "Cuenca",     // 4
		         "Giron",    // 5
		         "Gualaceo",    // 6		         
		         "Guaranda",    // 7		         
		         "Chillanes",    // 8
		         "Chimbo",    // 9
		         "Azoguez",    // 10		         
		         "Biblian",    // 11		         
                 "Cañar",         // 12 
                 "Cuenca",       // 13
                 "Bellavista",   // 14
                 "Cañaribamba",   // 15                 
                 "Giron",   // 16
                 "Asuncion",   // 17                 
                 "Gualaceo",   // 18                 
                 "Daniel Cordova Toral",   // 19
                 "Guaranda",   // 20                
                 "Angel Polivio Chavez",   // 21                 
                 "Chillanes",   // 22
                 "San Jose del Tambo",   // 23                 
                 "Chimbo",   // 24     
                 "Asumcion",   // 25
                 "Azoguez",   // 26               
                 "Borrero",   // 27                 
                 "Biblian",   // 28
                 "Nazon",   // 29             
                 "Cañar",   // 30
                 "Chontamarca" };    // 31	    


		    CheckNode[] nodes = new CheckNode[strs.length];
		    for (int i=0;i<strs.length;i++) {
		      nodes[i] = new CheckNode(strs[i]); 
		    }
		    nodes[0].add(nodes[1]);
		    nodes[0].add(nodes[2]);
		    nodes[0].add(nodes[3]);		    
		    nodes[1].add(nodes[4]);
		    nodes[1].add(nodes[5]);
		    nodes[1].add(nodes[6]);		    
		    nodes[2].add(nodes[7]);
		    nodes[2].add(nodes[8]);		    
		    nodes[2].add(nodes[9]);		    
		    nodes[3].add(nodes[10]);		    
		    nodes[3].add(nodes[11]);
		    nodes[3].add(nodes[12]);
		    nodes[4].add(nodes[13]);		    
		    nodes[4].add(nodes[14]);		    
		    nodes[4].add(nodes[15]);
		    nodes[5].add(nodes[16]);		    
		    nodes[5].add(nodes[17]);
		    nodes[6].add(nodes[18]);		    
		    nodes[6].add(nodes[19]);
		    nodes[7].add(nodes[20]);		    
		    nodes[7].add(nodes[21]);
		    nodes[8].add(nodes[22]);		    
		    nodes[8].add(nodes[23]);
		    nodes[9].add(nodes[24]);		    
		    nodes[9].add(nodes[25]);
		    nodes[10].add(nodes[26]);		    
		    nodes[10].add(nodes[27]);
		    nodes[11].add(nodes[28]);		    
		    nodes[11].add(nodes[29]);
		    nodes[12].add(nodes[30]);		    
		    nodes[12].add(nodes[31]);
		    
		    return nodes; 
        
    }
    
    
    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new fFijaTerritorio().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify
    private javax.swing.JButton cmdAceptar;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTree jTreeTerritorio;
    // End of variables declaration

    private DefaultTreeModel modelo;    
}



class NodeSelectionListener extends MouseAdapter {
    JTree tree;
    
    NodeSelectionListener(JTree tree) {
      this.tree = tree;
    }
    
    public void mouseClicked(MouseEvent e) {
      int x = e.getX();
      int y = e.getY();
      int row = tree.getRowForLocation(x, y);
      TreePath  path = tree.getPathForRow(row);
      //TreePath  path = tree.getSelectionPath();
      if (path != null) {
        CheckNode node = (CheckNode)path.getLastPathComponent();
        boolean isSelected = ! (node.isSelected());
        node.setSelected(isSelected);
        if (node.getSelectionMode() == CheckNode.DIG_IN_SELECTION) {
          if ( isSelected) {
            tree.expandPath(path);
          } else {
            tree.collapsePath(path);
          }
        }
        ((DefaultTreeModel) tree.getModel()).nodeChanged(node);
        // I need revalidate if node is root.  but why?
        if (row == 0) {
          tree.revalidate();
          tree.repaint();
        }
      }
    }
  }

class CheckNode extends DefaultMutableTreeNode {

	  public final static int SINGLE_SELECTION = 0;

	  public final static int DIG_IN_SELECTION = 4;

	  protected int selectionMode;

	  protected boolean isSelected;

	  public CheckNode() {
	    this(null);
	  }

	  public CheckNode(Object userObject) {
	    this(userObject, true, false);
	  }

	  public CheckNode(Object userObject, boolean allowsChildren,
	      boolean isSelected) {
	    super(userObject, allowsChildren);
	    this.isSelected = isSelected;
	    setSelectionMode(DIG_IN_SELECTION);
	  }

	  public void setSelectionMode(int mode) {
	    selectionMode = mode;
	  }

	  public int getSelectionMode() {
	    return selectionMode;
	  }

	  public void setSelected(boolean isSelected) {
	    this.isSelected = isSelected;

	    if ((selectionMode == DIG_IN_SELECTION) && (children != null)) {
	      Enumeration e = children.elements();
	      while (e.hasMoreElements()) {
	        CheckNode node = (CheckNode) e.nextElement();
	        node.setSelected(isSelected);
	      }
	    }
	  }

	  public boolean isSelected() {
	    return isSelected;
	  }

	  // If you want to change "isSelected" by CellEditor,
	  /*
	   public void setUserObject(Object obj) { if (obj instanceof Boolean) {
	   * setSelected(((Boolean)obj).booleanValue()); } else {
	   * super.setUserObject(obj); } }
	   */

	}

class CheckRenderer extends JPanel implements TreeCellRenderer {
	  protected JCheckBox check;

	  protected TreeLabel label;

	  public CheckRenderer() {
	    setLayout(null);
	    add(check = new JCheckBox());
	    add(label = new TreeLabel());
	    check.setBackground(UIManager.getColor("Tree.textBackground"));
	    label.setForeground(UIManager.getColor("Tree.textForeground"));
	  }

	  public Component getTreeCellRendererComponent(JTree tree, Object value,
	      boolean isSelected, boolean expanded, boolean leaf, int row,
	      boolean hasFocus) {
	    String stringValue = tree.convertValueToText(value, isSelected,
	        expanded, leaf, row, hasFocus);
	    setEnabled(tree.isEnabled());
	    check.setSelected(((CheckNode) value).isSelected());
	    label.setFont(tree.getFont());
	    label.setText(stringValue);
	    label.setSelected(isSelected);
	    label.setFocus(hasFocus);
	    if (leaf) {
	      label.setIcon(UIManager.getIcon("Tree.leafIcon"));
	    } else if (expanded) {
	      label.setIcon(UIManager.getIcon("Tree.openIcon"));
	    } else {
	      label.setIcon(UIManager.getIcon("Tree.closedIcon"));
	    }
	    return this;
	  }

	  public Dimension getPreferredSize() {
	    Dimension d_check = check.getPreferredSize();
	    Dimension d_label = label.getPreferredSize();
	    return new Dimension(d_check.width + d_label.width,
	        (d_check.height < d_label.height ? d_label.height
	            : d_check.height));
	  }

	  public void doLayout() {
	    Dimension d_check = check.getPreferredSize();
	    Dimension d_label = label.getPreferredSize();
	    int y_check = 0;
	    int y_label = 0;
	    if (d_check.height < d_label.height) {
	      y_check = (d_label.height - d_check.height) / 2;
	    } else {
	      y_label = (d_check.height - d_label.height) / 2;
	    }
	    check.setLocation(0, y_check);
	    check.setBounds(0, y_check, d_check.width, d_check.height);
	    label.setLocation(d_check.width, y_label);
	    label.setBounds(d_check.width, y_label, d_label.width, d_label.height);
	  }

	  public void setBackground(Color color) {
	    if (color instanceof ColorUIResource)
	      color = null;
	    super.setBackground(color);
	  }

	  public class TreeLabel extends JLabel {
	    boolean isSelected;

	    boolean hasFocus;

	    public TreeLabel() {
	    }

	    public void setBackground(Color color) {
	      if (color instanceof ColorUIResource)
	        color = null;
	      super.setBackground(color);
	    }

	    public void paint(Graphics g) {
	      String str;
	      if ((str = getText()) != null) {
	        if (0 < str.length()) {
	          if (isSelected) {
	            g.setColor(UIManager
	                .getColor("Tree.selectionBackground"));
	          } else {
	            g.setColor(UIManager.getColor("Tree.textBackground"));
	          }
	          Dimension d = getPreferredSize();
	          int imageOffset = 0;
	          Icon currentI = getIcon();
	          if (currentI != null) {
	            imageOffset = currentI.getIconWidth()
	                + Math.max(0, getIconTextGap() - 1);
	          }
	          g.fillRect(imageOffset, 0, d.width - 1 - imageOffset,
	              d.height);
	          if (hasFocus) {
	            g.setColor(UIManager
	                .getColor("Tree.selectionBorderColor"));
	            g.drawRect(imageOffset, 0, d.width - 1 - imageOffset,
	                d.height - 1);
	          }
	        }
	      }
	      super.paint(g);
	    }

	    public Dimension getPreferredSize() {
	      Dimension retDimension = super.getPreferredSize();
	      if (retDimension != null) {
	        retDimension = new Dimension(retDimension.width + 3,
	            retDimension.height);
	      }
	      return retDimension;
	    }

	    public void setSelected(boolean isSelected) {
	      this.isSelected = isSelected;
	    }

	    public void setFocus(boolean hasFocus) {
	      this.hasFocus = hasFocus;
	    }
	  }
	}